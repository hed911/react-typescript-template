{"ast":null,"code":"import { useReducer, useCallback } from \"react\";\nconst initialState = {\n  loading: false,\n  error: null,\n  data: null,\n  extra: null,\n  identifier: null\n};\n\nconst httpReducer = (curHttpState, action) => {\n  switch (action.type) {\n    case \"SEND\":\n      return {\n        loading: true,\n        error: null,\n        data: null,\n        extra: null,\n        identifier: action.identifier\n      };\n\n    case \"RESPONSE\":\n      return { ...curHttpState,\n        loading: false,\n        data: action.responseData,\n        extra: action.extra\n      };\n\n    case \"ERROR\":\n      return {\n        loading: false,\n        error: action.errorMessage\n      };\n\n    case \"CLEAR\":\n      return initialState;\n\n    default:\n      throw new Error(\"Should not be reached!\");\n  }\n};\n\nconst useHttp = () => {\n  const [httpState, dispatchHttp] = useReducer(httpReducer, initialState);\n  const clear = useCallback(() => dispatchHttp({\n    type: \"CLEAR\"\n  }), []);\n  const sendRequest = useCallback((url, method, body, reqExtra, reqIdentifer) => {\n    dispatchHttp({\n      type: \"SEND\",\n      identifier: reqIdentifer\n    });\n    fetch(url, {\n      method: method,\n      body: body,\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => {\n      return response.json();\n    }).then(responseData => {\n      dispatchHttp({\n        type: \"RESPONSE\",\n        responseData: responseData,\n        extra: reqExtra\n      });\n    }).catch(error => {\n      dispatchHttp({\n        type: \"ERROR\",\n        errorMessage: \"Something went wrong!\"\n      });\n    });\n  }, []);\n  return {\n    isLoading: httpState.loading,\n    data: httpState.data,\n    error: httpState.error,\n    sendRequest: sendRequest,\n    reqExtra: httpState.extra,\n    reqIdentifer: httpState.identifier,\n    clear: clear\n  };\n};\n\nexport default useHttp;","map":{"version":3,"sources":["/Users/eduardoescobar/proyectos/own/hedu911-template/src/hooks/http.ts"],"names":["useReducer","useCallback","initialState","loading","error","data","extra","identifier","httpReducer","curHttpState","action","type","responseData","errorMessage","Error","useHttp","httpState","dispatchHttp","clear","sendRequest","url","method","body","reqExtra","reqIdentifer","fetch","headers","then","response","json","catch","isLoading"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,QAAwC,OAAxC;AAiBA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,KADU;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,IAAI,EAAE,IAHa;AAInBC,EAAAA,KAAK,EAAE,IAJY;AAKnBC,EAAAA,UAAU,EAAE;AALO,CAArB;;AAQA,MAAMC,WAAW,GAAG,CAACC,YAAD,EAA0BC,MAA1B,KAAwD;AAC1E,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,MAAL;AACE,aAAO;AACLR,QAAAA,OAAO,EAAE,IADJ;AAELC,QAAAA,KAAK,EAAE,IAFF;AAGLC,QAAAA,IAAI,EAAE,IAHD;AAILC,QAAAA,KAAK,EAAE,IAJF;AAKLC,QAAAA,UAAU,EAAEG,MAAM,CAACH;AALd,OAAP;;AAOF,SAAK,UAAL;AACE,aAAO,EACL,GAAGE,YADE;AAELN,QAAAA,OAAO,EAAE,KAFJ;AAGLE,QAAAA,IAAI,EAAEK,MAAM,CAACE,YAHR;AAILN,QAAAA,KAAK,EAAEI,MAAM,CAACJ;AAJT,OAAP;;AAMF,SAAK,OAAL;AACE,aAAO;AAAEH,QAAAA,OAAO,EAAE,KAAX;AAAkBC,QAAAA,KAAK,EAAEM,MAAM,CAACG;AAAhC,OAAP;;AACF,SAAK,OAAL;AACE,aAAOX,YAAP;;AACF;AACE,YAAM,IAAIY,KAAJ,CAAU,wBAAV,CAAN;AArBJ;AAuBD,CAxBD;;AA0BA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BjB,UAAU,CAACQ,WAAD,EAAcN,YAAd,CAA5C;AAEA,QAAMgB,KAAK,GAAGjB,WAAW,CAAC,MAAMgB,YAAY,CAAC;AAAEN,IAAAA,IAAI,EAAE;AAAR,GAAD,CAAnB,EAAwC,EAAxC,CAAzB;AAEA,QAAMQ,WAAW,GAAGlB,WAAW,CAC7B,CAACmB,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAoBC,QAApB,EAA8BC,YAA9B,KAA+C;AAC7CP,IAAAA,YAAY,CAAC;AAAEN,MAAAA,IAAI,EAAE,MAAR;AAAgBJ,MAAAA,UAAU,EAAEiB;AAA5B,KAAD,CAAZ;AACAC,IAAAA,KAAK,CAACL,GAAD,EAAM;AACTC,MAAAA,MAAM,EAAEA,MADC;AAETC,MAAAA,IAAI,EAAEA,IAFG;AAGTI,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAHA,KAAN,CAAL,CAOGC,IAPH,CAOSC,QAAD,IAAc;AAClB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACD,KATH,EAUGF,IAVH,CAUSf,YAAD,IAAkB;AACtBK,MAAAA,YAAY,CAAC;AACXN,QAAAA,IAAI,EAAE,UADK;AAEXC,QAAAA,YAAY,EAAEA,YAFH;AAGXN,QAAAA,KAAK,EAAEiB;AAHI,OAAD,CAAZ;AAKD,KAhBH,EAiBGO,KAjBH,CAiBU1B,KAAD,IAAW;AAChBa,MAAAA,YAAY,CAAC;AACXN,QAAAA,IAAI,EAAE,OADK;AAEXE,QAAAA,YAAY,EAAE;AAFH,OAAD,CAAZ;AAID,KAtBH;AAuBD,GA1B4B,EA2B7B,EA3B6B,CAA/B;AA8BA,SAAO;AACLkB,IAAAA,SAAS,EAAEf,SAAS,CAACb,OADhB;AAELE,IAAAA,IAAI,EAAEW,SAAS,CAACX,IAFX;AAGLD,IAAAA,KAAK,EAAEY,SAAS,CAACZ,KAHZ;AAILe,IAAAA,WAAW,EAAEA,WAJR;AAKLI,IAAAA,QAAQ,EAAEP,SAAS,CAACV,KALf;AAMLkB,IAAAA,YAAY,EAAER,SAAS,CAACT,UANnB;AAOLW,IAAAA,KAAK,EAAEA;AAPF,GAAP;AASD,CA5CD;;AA8CA,eAAeH,OAAf","sourcesContent":["import { useReducer, useCallback } from \"react\";\n\ninterface HttpState {\n  loading: boolean;\n  error?: string | null;\n  data?: any | null;\n  extra?: string | null;\n  identifier?: string | null;\n}\ninterface Action {\n  type: string;\n  identifier?: string;\n  responseData?: any;\n  extra?: string;\n  errorMessage?: string;\n}\n\nconst initialState = {\n  loading: false,\n  error: null,\n  data: null,\n  extra: null,\n  identifier: null,\n};\n\nconst httpReducer = (curHttpState: HttpState, action: Action): HttpState => {\n  switch (action.type) {\n    case \"SEND\":\n      return {\n        loading: true,\n        error: null,\n        data: null,\n        extra: null,\n        identifier: action.identifier,\n      };\n    case \"RESPONSE\":\n      return {\n        ...curHttpState,\n        loading: false,\n        data: action.responseData,\n        extra: action.extra,\n      };\n    case \"ERROR\":\n      return { loading: false, error: action.errorMessage };\n    case \"CLEAR\":\n      return initialState;\n    default:\n      throw new Error(\"Should not be reached!\");\n  }\n};\n\nconst useHttp = () => {\n  const [httpState, dispatchHttp] = useReducer(httpReducer, initialState);\n\n  const clear = useCallback(() => dispatchHttp({ type: \"CLEAR\" }), []);\n\n  const sendRequest = useCallback(\n    (url, method, body, reqExtra, reqIdentifer) => {\n      dispatchHttp({ type: \"SEND\", identifier: reqIdentifer });\n      fetch(url, {\n        method: method,\n        body: body,\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n        .then((response) => {\n          return response.json();\n        })\n        .then((responseData) => {\n          dispatchHttp({\n            type: \"RESPONSE\",\n            responseData: responseData,\n            extra: reqExtra,\n          });\n        })\n        .catch((error) => {\n          dispatchHttp({\n            type: \"ERROR\",\n            errorMessage: \"Something went wrong!\",\n          });\n        });\n    },\n    []\n  );\n\n  return {\n    isLoading: httpState.loading,\n    data: httpState.data,\n    error: httpState.error,\n    sendRequest: sendRequest,\n    reqExtra: httpState.extra,\n    reqIdentifer: httpState.identifier,\n    clear: clear,\n  };\n};\n\nexport default useHttp;\n"]},"metadata":{},"sourceType":"module"}